
sub 
	GDM_generation (bool coherent)

begin

	int trial_coherence = current_coherence_lv;

	if coherent == false then
		#override coherence level
		trial_coherence = 0
	else
	end;

	# CREATE STARTING ARRAY

	loop
		int i = 1
	until
		i > num_dots
	begin
		
		# randomise parameters
		double origin_distance = random(10, aperture_radius);
		double origin_angle_degrees = random(0, 359);
		double origin_angle_radians = origin_angle_degrees * ( pi_value/180 );
		
		# calculate x/y coordinates given these parameters
		double x = origin_distance * cos( origin_angle_radians );
		double y = origin_distance * sin( origin_angle_radians );

		# check to see if coordinate pair overlaps previously stored pair
		bool match_found = false;

		loop
			int h = 1
		until
			h >= i
		begin
			if x >= dot_coords[h][1][1] - (dot_width/2) && x <= dot_coords[h][1][1] + (dot_width/2) &&
				y >= dot_coords[h][1][2] - (dot_width/2) && y <= dot_coords[h][1][2] + (dot_width/2) then
				match_found = true;
			else
			end;
			
			h = h + 1;
		end;
		
		if match_found == false then
			dot_coords[i][1][1] = x;
			dot_coords[i][1][2] = y;
			i = i + 1;
			# script moves on to next dot
		else
			# i does not increment and new values are generated and checks made again
		end;
		
	end;

	# GENERATE DOT MOVEMENTS

	radial_direction.shuffle();

	loop
		int f = 2
	until
		f > num_frames
	begin
		
		# Randomise order of dots in array
		dot_coords.shuffle();
		# Randomly choose rotation direction of coherent dots
		
	# Generate coherent, radial movements
		loop
			int c = 1
		until
			c > trial_coherence
		begin
			# Get coordinates from previous frame
			double x = dot_coords[c][f-1][1];
			double y = dot_coords[c][f-1][2];

			# Calculate distance from centre (radius) and angle from centre
			double radius = sqrt( (x*x) + (y*y) );
			double angle_radians = arctan2d(  y - y_origin, x - x_origin );
			double angle_degrees = ( 180 * angle_radians ) / pi_value;
			
	#		term.print_line( "f=" + string(f) + ", c=" + string(c) + ", radius=" + string(radius) );
			# Calculate next angle from origin if dot was to move in a radial direction for a pre-defined distance
			double arc_angle_degrees = ( distance/(pi_value * ( radius*2)) ) * 360;
			double new_angle_degrees = angle_degrees + ( arc_angle_degrees * radial_direction[1]);
				# Adjust angle value if out of range
				if new_angle_degrees >= 360 then new_angle_degrees = new_angle_degrees - 360;
				elseif new_angle_degrees < 0 then new_angle_degrees = new_angle_degrees + 360;
				end;
			# Convert to radians and calculate and store coordinates for frame
			double new_angle_radians = new_angle_degrees * ( pi_value/180 );
			dot_coords[c][f][1] = radius * cos( new_angle_radians );
			dot_coords[c][f][2] = radius * sin( new_angle_radians );			
			
			c = c + 1; # coherent, radial movements will never conflict and supercede random movements, so no collision checks needed
		end;
		
	# Generate random movements
		loop
			int r = trial_coherence + 1;
			int generation_attempt = 1
		until
			r > num_dots
		begin
			bool coordinates_valid = false;

			# Get coordinates from previous frame
			double x = dot_coords[r][f-1][1];
			double y = dot_coords[r][f-1][2];

			# Generate random direction to move in and calculate new coordinates
			double random_angle_degrees = random( 0, 359 );
			double random_angle_radians = random_angle_degrees * ( pi_value/180 );
			x = distance * cos( random_angle_radians ) + x;
			y = distance * sin( random_angle_radians ) + y;

			# Do the new coordinates lie within the aperture?
			bool outside_aperture = false;
			
			double radius = sqrt( (x*x) + (y*y) );
			if radius < aperture_radius then
				# retain current coordinates for now
				outside_aperture = false;
			else
				# generate new coordinates to move the dot to
				loop
				until
					coordinates_valid == true
				begin
					# randomise parameters
					double origin_distance = random(10, aperture_radius);
					double origin_angle_degrees = random(0, 359);
					double origin_angle_radians = origin_angle_degrees * ( pi_value/180 );
					
					# calculate x/y coordinates given these parameters
					x = origin_distance * cos( origin_angle_radians );
					y = origin_distance * sin( origin_angle_radians );

					# check to see if coordinate pair overlaps previously stored pair
					bool match_found = false;

					loop
						int d = 1
					until
						d >= r
					begin
						if x >= dot_coords[d][f][1] - (dot_width/2) && x <= dot_coords[d][f][1] + (dot_width/2) &&
							y >= dot_coords[d][f][2] - (dot_width/2) && y <= dot_coords[d][f][2] + (dot_width/2) then
							match_found = true;
						else
						end;
						d = d + 1;
					end;
					
					if match_found == false then
						# trigger to end loop and continue
						coordinates_valid = true;
					else
						coordinates_valid = false;
					end;
				end;
			end;

			# Given the dot is within the aperture, does it overlap another dot?
			# If dot was moved to a new random location, the coordinates have already been validated
			
			if coordinates_valid == false then
				bool match_found = false;

				loop
					int d = 1
				until
					d == r # loop until we get to the current dot we are determining coordinates for
				begin
					if x >= dot_coords[d][f][1] - (dot_width/2) && x <= dot_coords[d][f][1] + (dot_width/2) &&
						y >= dot_coords[d][f][2] - (dot_width/2) && y <= dot_coords[d][f][2] + (dot_width/2) then	
						match_found = true;
					else
					end;
					d = d + 1;
				end;
				
				# if match is still false at end of previous loop, coordinates must be valid
				if match_found == false then
					coordinates_valid = true;
					generation_attempt = 0;
				else
					generation_attempt = generation_attempt + 1;
				end;

			elseif coordinates_valid == true then
				# skip this step
			end;
				
			if coordinates_valid == true || generation_attempt > 5 then
				# store location in array and move to next dot
				# will force overlapping dots if 5 attempts to generate a unique direction fail
				dot_coords[r][f][1] = x;
				dot_coords[r][f][2] = y;			
				r = r + 1;
			else
				# this loop will repeat, beginning with generating a new random direction
				# bear in mind that if the dot moves outside the aperture, it's new position
				# will always be validated before reaching this if statement
			end;
					
		end;
		f = f + 1;

	end;

end; #ENDSUB